{"_id":"SrJN3RvSnkrSh2Rj","name":"Vision Configuration","type":"script","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","scope":"global","command":"// credit to this repo/user: https://github.com/Sky-Captain-13/foundry/blob/master/scriptMacros/tokenVision.js\nlet applyChanges = false;\nnew Dialog({\n  title: `Token Vision Configuration`,\n  content: `\n    <form>\n      <div class=\"form-group\">\n        <label>Vision Type:</label>\n        <select id=\"vision-type\" name=\"vision-type\">\n          <option value=\"nochange\">No Change</option>\n          <option value=\"dim0\">Self</option>\n          <option value=\"dim30\">Darkvision (30 ft)</option>\n          <option value=\"dim60\">Darkvision (60 ft)</option>\n          <option value=\"dim90\">Darkvision (90 ft)</option>\n          <option value=\"dim120\">Darkvision (120 ft)</option>\n          <option value=\"dim150\">Darkvision (150 ft)</option>\n          <option value=\"dim180\">Darkvision (180 ft)</option>\n          <option value=\"bright120\">Devil's Sight (Warlock)</option>\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Light Source:</label>\n        <select id=\"light-source\" name=\"light-source\">\n          <option value=\"nochange\">No Change</option>\n          <option value=\"none\">None</option>\n          <option value=\"candle\">Candle</option>\n          <option value=\"lamp\">Lamp</option>\n          <option value=\"bullseye\">Lantern (Bullseye)</option>\n          <option value=\"hooded-dim\">Lantern (Hooded - Dim)</option>\n          <option value=\"hooded-bright\">Lantern (Hooded - Bright)</option>\n          <option value=\"light\">Light (Cantrip)</option>\n          <option value=\"torch\">Torch</option>\n        </select>\n      </div>\n    </form>\n    `,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply Changes`,\n      callback: () => applyChanges = true\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel Changes`\n    },\n  },\n  default: \"yes\",\n  close: html => {\n    if (applyChanges) {\n      for ( let token of canvas.tokens.controlled ) {\n        let visionType = html.find('[name=\"vision-type\"]')[0].value || \"none\";\n        let lightSource = html.find('[name=\"light-source\"]')[0].value || \"none\";\n        let dimSight = 0;\n        let brightSight = 0;\n        let dimLight = 0;\n        let brightLight = 0;\n        let lightAngle = 360;\n        let lockRotation = token.data.lockRotation;\n        // Get Vision Type Values\n        switch (visionType) {\n          case \"dim0\":\n            dimSight = 0;\n            brightSight = 0;\n            break;\n          case \"dim30\":\n            dimSight = 30;\n            brightSight = 0;\n            break;\n          case \"dim60\":\n            dimSight = 60;\n            brightSight = 0;\n            break;\n          case \"dim90\":\n            dimSight = 90;\n            brightSight = 0;\n            break;\n          case \"dim120\":\n            dimSight = 120;\n            brightSight = 0;\n            break;\n          case \"dim150\":\n            dimSight = 150;\n            brightSight = 0;\n            break;\n          case \"dim180\":\n            dimSight = 180;\n            brightSight = 0;\n            break;\n          case \"bright120\":\n            dimSight = 0;\n            brightSight= 120;\n            break;\n          case \"nochange\":\n          default:\n            dimSight = token.data.dimSight;\n            brightSight = token.data.brightSight;\n        }\n        // Get Light Source Values\n        switch (lightSource) {\n          case \"none\":\n            dimLight = 0;\n            brightLight = 0;\n            break;\n          case \"candle\":\n            dimLight = 10;\n            brightLight = 5;\n            break;\n          case \"lamp\":\n            dimLight = 45;\n            brightLight = 15;\n            break;\n          case \"bullseye\":\n            dimLight = 120;\n            brightLight = 60;\n            lockRotation = false;\n            lightAngle = 52.5;\n            break;\n          case \"hooded-dim\":\n            dimLight = 5;\n            brightLight = 0;\n            break;\n          case \"hooded-bright\":\n            dimLight = 60;\n            brightLight = 30;\n            break;\n          case \"light\":\n            dimLight = 40;\n            brightLight = 20;\n            break;\n          case \"torch\":\n            dimLight = 40;\n            brightLight = 20;\n            break;\n          case \"nochange\":\n          default:\n            dimLight = token.data.dimLight;\n            brightLight = token.data.brightLight;\n            lightAngle = token.data.lightAngle;\n            lockRotation = token.data.lockRotation;\n        }\n        // Update Token\n        console.log(token);\n        token.document.update({light:{bright: brightLight, dim: dimLight, angle: lightAngle}});\n      }\n    }\n  }\n}).render(true);","folder":null,"sort":0,"permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"flags":{"core":{"sourceId":"Macro.j36GpxX1gHlgU92E"}}}
{"_id":"mRfgTfnbrbuiobL9","name":"Change Initiative Skill","type":"script","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","scope":"global","command":"// changes the default initiative skill for the selected tokens.  Will even change monsters/NPCs even though the UI does not support this.\n// Useful when staging an ambush for example.\n// If the creature has an inherent bonus to initiative on top of their skill this will not be accounted for.\n\nasync function setInitSkill(skillname)\n{\n    canvas.tokens.controlled.forEach(async function(changetoken){\n        if(changetoken.actor.data.type!=\"character\"){\n            let skillval=skillname==\"perception\"? changetoken.actor.data.data.attributes.perception.totalModifier : changetoken.actor.data.data.skills[skillname].totalModifier;\n            await changetoken.actor.update({\n            'data.attributes.initiative.ability':skillname,\n            'data.attributes.initiative.totalModifier':skillval\n            });    \n        }else{\n            await changetoken.actor.update({\n            'data.attributes.initiative.ability':skillname\n            });\n        }\n    });\n}\n\nlet applyChanges=false;\nnew Dialog({\n  title: `Set Initiative Skill`,\n  content: `\n    <form>\n      <div class=\"form-group\">\n        <select id=\"init-skill\" name=\"init-skill\">\n            <option value=\"perception\" selected=\"\">Perception</option>\n            <option value=\"acr\">Acrobatics</option>\n            <option value=\"arc\">Arcana</option>\n            <option value=\"ath\">Athletics</option>\n            <option value=\"cra\">Crafting</option>\n            <option value=\"dec\">Deception</option>\n            <option value=\"dip\">Diplomacy</option>\n            <option value=\"itm\">Intimidation</option>\n            <option value=\"med\">Medicine</option>\n            <option value=\"nat\">Nature</option>\n            <option value=\"occ\">Occultism</option>\n            <option value=\"prf\">Performance</option>\n            <option value=\"rel\">Religion</option>\n            <option value=\"soc\">Society</option>\n            <option value=\"ste\">Stealth</option>\n            <option value=\"sur\">Survival</option>\n            <option value=\"thi\">Thievery</option>\n        </select>\n      </div>\n    </form>\n    `,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply Changes`,\n      callback: () => applyChanges = true\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel Changes`\n    },\n  },\n  default: \"yes\",\n  close: html => {\n      if (applyChanges) {\n        let skillchoice = html.find('[name=\"init-skill\"]')[0].value || \"perception\";\n        setInitSkill(skillchoice);\n        }\n    }\n}).render(true);","folder":null,"sort":0,"permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"flags":{"core":{"sourceId":"Macro.QMlgEpcmf1KjOkL8"}}}
{"_id":"wSgi32QJPlpLqnz3","name":"Fall Damage","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3},"type":"chat","flags":{"core":{"sourceId":"Macro.b5tyLRVraNOQ3h4d"}},"scope":"global","command":"When you fall more than 5 feet, you take bludgeoning damage equal to half the distance you fell when you land. If you take any damage from a fall, you land prone.\n\nie. 10 ft. is [[/roll 5]] Bludgeoning Damage\n\nFalling on a Creature:\n\nIf you land on a creature, that creature must attempt a DC 15 Reflex Save. \n\nCritical Success: The creature takes no damage.\n\nSuccess: The creature takes bludgeoning damage equal to one-quarter the falling damage you took.\n\nFailure: The creature takes bludgeoning damage equal to half the falling damage you took.\n\nCritical Failure: The creature takes the same amount of bludgeoning damage you took from the fall.","author":"y5gmtwxmW3A5ZuOP","img":"icons/svg/dice-target.svg","actorIds":[]}
